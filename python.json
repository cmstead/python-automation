{
	// Core Python
	"Import Built-in Module": {
		"prefix": "import-built-in-module",
		"body": [
			"import ${1|os,json,functools|}"
		],
		"description": "Import built-in module"
	},
	"Run CLI Ccommand": {
		"prefix": "run-cli-command",
		"body": [
			"os.system(\"$1\")"
		],
		"description": "run-cli-command"
	},
	"JSON Serialize": {
		"prefix": "json-serialize",
		"body": [
			"json.dumps($1${2:, indent=${3|4,2|}})"
		],
		"description": "Serialize/encode JSON"
	},
	"JSON Deserialize": {
		"prefix": "json-serialize",
		"body": [
			"json.loads($1)"
		],
		"description": "Deserialize/decode JSON"
	},
	"Path join": {
		"prefix": "path-join",
		"body": [
			"os.path.realpath(os.path.join($1))"
		],
		"description": "Join path substrings"
	},
	"Current File Path (Directory)": {
		"prefix": "current-file-path",
		"body": [
			"file_directory = os.path.dirname(os.path.realpath(__file__))"
		],
		"description": "Get current file path (directory)"
	},
	"Current Working Directory": {
		"prefix": "cwd",
		"body": [
			"os.getcwd()"
		],
		"description": "Get current working directory"
	},
	"Variable": {
		"prefix": "var",
		"body": [
			"${1/([A-Z])/_${1:/downcase}/g} = $2"
		],
		"description": "Simple variable definition"
	},
	"Constant": {
		"prefix": "const",
		"body": [
			"${1/(.*)/${1:/upcase}/} = $2"
		],
		"description": "Simple constant definition"
	},
	"Import": {
		"prefix": "import",
		"body": [
			"${1:from ${2:package} }import ${3:itemName}"
		],
		"description": "Import statement"
	},
	"With": {
		"prefix": "with-setup",
		"body": [
			"with ${1:object} as ${2:alias}:",
			"    ${3:pass}"
		],
		"description": ""
	},
	"File Read/Write Setup": {
		"prefix": "file-read-write-io",
		"body": [
			"with open(${1:file_path}, \"${2|r,w,rb,wb|}\") as ${3:alias}:",
			"    ${4:pass}"
		],
		"description": "Setup for file read/write operations"
	},
	"Class": {
		"prefix": "class-extended",
		"body": [
			"class ${1/^([a-z])/${1:/upcase}/}${2:(${3:ParentClass})}:",
			"    ${4:pass}"
		],
		"description": "Extended class snippet -- easier to ignore derivation"
	},
	"Constructor": {
		"prefix": "ctor",
		"body": [
			"def __init__(self${2:, ${3:parameters}}):",
			"    ${3/(, )?([^, ]+)/self.$2 = $2\n        /g}"
		],
		"description": "Simple class setup"
	},
	"Parameter": {
		"prefix": "parameter",
		"body": [
			"${1/([A-Z])/_${1:/downcase}/g}${2: = ${3:default_value}}"
		],
		"description": "Function/method parameter"
	},
	"Method": {
		"prefix": "method",
		"body": [
			"def ${1/([A-Z])/_${1:/downcase}/g}(${2|self,cls|}, ${3:parameters}):",
			"    ${4:pass}"
		],
		"description": "Simple method definition"
	},
	"Function": {
		"prefix": "function",
		"body": [
			"def ${1/([A-Z])/_${1:/downcase}/g}(${2:parameters}):",
			"    ${3:pass}"
		],
		"description": "Simple function definition"
	},
	"DI Class": {
		"prefix": "di-class",
		"body": [
			"class ${1:${TM_FILENAME_BASE/(^[A-Z])/${1:/upcase}/}}${2:(${3:ParentClass})}:",
			"    def __init__(self${4:, ${5:parameters}}):",
			"        ${5/(, )?([^, ]+)/self.$2 = $2\n        /g}",
			"",
			"def get${1/([A-Z])/_${1:/downcase}/g}():",
			"    ${5/(, )?([^, ]+)/$2 = None\n    /g}",
			"    return $1($5)"
		],
		"description": "Class with DI-related (dependency injection) factory function"
	},
	// PyInquirer
	"PyInquirer Import": {
		"prefix": "pyinquirer-import",
		"body": [
			"from PyInquirer import prompt"
		],
		"description": "Import PyInquirer prompt function"
	},
	"PyInquirer Prompt": {
		"prefix": "pyinquirer-prompt",
		"body": [
			"prompt([",
			"    $0",
			"])"
		],
		"description": "Prompt user with PyInquirer"
	},
	"PyInquirer Input": {
		"prefix": "pyinquirer-input",
		"body": [
			"{",
			"    \"type\": \"input\",",
			"    \"name\": \"${1:variable_name}\",",
			"    \"message\": \"${2:message}\"",
			"}"
		],
		"description": "PyInquirer input definition"
	},
	"PyInquirer List": {
		"prefix": "pyinquirer-list",
		"body": [
			"{",
			"    \"type\": \"${1|list,rawlist|}\",",
			"    \"name\": \"${2:variable_name}\",",
			"    \"message\": \"${3:message}\",",
			"    \"choices\": ${4:[${5:choices}]}${6:,\n}",
			"}"
		],
		"description": "PyInquirer list definition"
	},
	"PyInquirer Checkbox": {
		"prefix": "pyinquirer-checkbox",
		"body": [
			"{",
			"    \"type\": \"checkbox\",",
			"    \"name\": \"${1:variable_name}\",",
			"    \"message\": \"${2:message}\",",
			"    \"choices\": ${3:[${4:choices}]}${5:,\n}",
			"}"
		],
		"description": "PyInquirer checkbox definition"
	},
	"PyInquirer Validate": {
		"prefix": "pyinquirer-validate-property",
		"body": [
			"\"validate\": ${1:lambda value: ${2:validationLogic}}"
		],
		"description": ""
	},
	// Switch
	"Import switch": {
		"prefix": "switch-import",
		"body": [
			"from switch import Switch"
		],
		"description": "Import switch into document"
	},
	"Switch setup": {
		"prefix": "switch-setup",
		"body": [
			"with Switch(${1:var_name}) as case:",
			"    ${2:pass}"
		],
		"description": "Switch statement setup"
	},
	"Switch case statement": {
		"prefix": "switch-case",
		"body": [
			"if case(${1:value}):",
			"    ${2:pass}"
		],
		"description": "Case statement for the switch library"
	},
	// PyTest
	"PyTest Test": {
		"prefix": "pytest-test",
		"body": [
			"def test_${1/([A-Z])/_${1:/downcase}/g}():",
			"    \"\"\"${2:description}\"\"\"",
			"    ${3:pass}",
			"    ${4:# Arrange}",
			"    ${5:# Act}",
			"    ${6:# Assert}"
		],
		"description": "PyTest test case"
	},
	"PyTest Assert": {
		"prefix": "pytest-assert",
		"body": [
			"assert ${1:assertion}"
		],
		"description": "PyTest test assertion"
	},
	// Doubles setup and use
	"Test Double Import": {
		"prefix": "test-double-doubles-import-doubles",
		"body": [
			"from doubles import InstanceDouble, allow, expect"
		],
		"description": "Import doubles library for test double creation"
	},
	"Create Test Double": {
		"prefix": "test-double-create-doubles",
		"body": [
			"${1:test_double_name} = InstanceDouble('${2:object.to.double}')"
		],
		"description": "Create a new test double"
	},
	"Allow Test Double Method Call": {
		"prefix": "test-double-allow-method-call-doubles",
		"body": [
			"allow(${1:test_double_name}).${2:method_name}.${3:${4|and_return,with_args,with_no_args,and_raise,and_return_result_of|}($0)}"
		],
		"description": "Add call-allow call to test double method"
	},
	"Expect Test Double Method Call": {
		"prefix": "test-double-expect-method-call-doubles",
		"body": [
			"expect(${1:test_double_name}).${2:method_name}.${3:${4|exactly,once,twice,never|}($0)}"
		],
		"description": "Add call-expectation call to test double method"
	},
	// Approvals
	"Approvals Import": {
		"prefix": "approvals-import",
		"body": [
			"import json",
			"",
			"from approvaltests.approvals import verify"
		],
		"description": "Import necessary libs for approval verification"
	},
	"Approvals Verify": {
		"prefix": "approvals-verify",
		"body": [
			"verify(json.dumps(${1:result}, sort_keys=${2|True,False|}, indent=${3|2,4|}))"
		],
		"description": "Approvals verification expression"
	},
	"Shebang": {
		"prefix": "shebang",
		"body": [
			"#!/usr/bin/env python${1:3.8}"
		],
		"description": "Scripting shebang"
	},
	"Script": {
		"prefix": "script-template",
		"body": [
			"#!/usr/bin/env python${1:3.8}",
			"",
			"from os import system",
			"import sys",
			"",
			"run_command = system",
			"",
			"def run_script():",
			"    args = sys.argv[1:]",
			"    run_command(${2:f\"echo hello\"})",
			"",
			"if __name__ == \"__main__\":",
			"    run_script()"
		],
		"description": "Basic setup for scripting tasks"
	},
	"Script Self Run": {
		"prefix": "script-self-run",
		"body": [
			"if __name__ == \"__main__\":",
			"    ${1:pass}"
		],
		"description": "Add script self-run condition"
	}
}